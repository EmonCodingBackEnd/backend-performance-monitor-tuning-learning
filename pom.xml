<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <modules>
        <module>tuning-log4j2</module>
        <module>tuning-slf4j</module>
        <module>tuning-monitor</module>
    </modules>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.5.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.coding.tuning</groupId>
    <artifactId>tuning-learning</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <description>涉及日志、堆栈、异常与调优！Involving logs, stacks, exceptions and tuning!</description>

    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <spring-boot.version>2.3.5.RELEASE</spring-boot.version>
        <spring-cloud.version>Hoxton.SR8</spring-cloud.version>

        <hutool.version>5.8.0.M4</hutool.version>
        <logging.version>1.2</logging.version>
        <jcl.version>2.17.2</jcl.version>
        <slf4j.version>1.7.36</slf4j.version>
        <logback.version>1.2.11</logback.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- 定义三方包 beg -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- 国货工具类：https://www.hutool.cn/docs/#/ https://mvnrepository.com/artifact/cn.hutool/hutool-all -->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>

            <!--日志框架 beg-->
            <!--
                    日志框架梳理：https://www.yisu.com/zixun/357250.html
                    logbak中读取yml属性：https://www.cnblogs.com/penghq/p/13361259.html
                    JDK自带的logging -> java-util-logging -> 简称 JUL
                    apache commons-logging -> 简称JCL
                    Simple Logging Facade for Java -> 简称SLF4j，简单日志门面类

                    JCL和SLF4J都是日志门面，而Log4j、Log4j2以及LogBack和JUL都是具体的日志实现。

                    JCL有两个基本的抽象类： Log( 基本记录器 ) 和 LogFactory( 负责创建 Log 实例 ) 。
                    当 commons-logging.jar 被加入到 CLASSPATH之后，它会合理地猜测你想用的日志工具，然后进行自我设置，用户根本不需要做任何设置。
                    默认的 LogFactory 是按照下列的步骤去发现并决定那个日志工具将被使用的（按照顺序，寻找过程会在找到第一个工具时中止）
                    ①首先在classpath下寻找commons-logging.properties文件。如果找到，则使用其中定义的Log实现类；
                        如果找不到，则在查找是否已定义系统环境变量org.apache.commons.logging.LogFactory，找到则使用其定义的Log实现类；
                        org.apache.commons.logging.Log 的具体实现有如下：
                        -org.apache.commons.logging.impl.Jdk14Logger 　使用 JDK1.4 。
                        -org.apache.commons.logging.impl.Log4JLogger 　使用 Log4J 。
                        -org.apache.commons.logging.impl.LogKitLogger  使用 avalon-Logkit 。
                        -org.apache.commons.logging.impl.SimpleLog 　  common-logging 自带日志实现类。
                        -org.apache.commons.logging.impl.NoOpLog       common-logging 自带日志实现类。它实现了 Log 接口。 其输出日志的方法中不进行任何操作。
                    ②否则，查找SPI： META-INF/services/org.apache.commons.logging.LogFactory 根据SPI配置加载日志类
                    ③否则，在属性文件中查找： org.apache.commons.logging.LogFactory
                    ④否则，查找自己实现的 org.apache.commons.logging.impl.LogFactoryImpl

                    ②查看classpath中是否有Log4j的包，如果发现，则自动使用Log4j作为日志实现类；
                    ③否则，使用JDK自身的日志实现类（JDK1.4以后才有日志实现类）；
                    ④否则，使用commons-logging自己提供的一个简单的日志实现类SimpleLog；

                    重点：commons-logging最核心有用的功能是解耦
                    -->
            <!--commons-logging 与 log4j2 集成-->
            <dependency>
                <groupId>commons-logging</groupId>
                <artifactId>commons-logging</artifactId>
                <version>${logging.version}</version>
            </dependency>
            <!--是apache推出的日志接口，日志的具体实现依赖于实际配置，这样可以分离接口和实现。log4j-jcl时实现jcl的jar包（只是桥接，核心实现在api和core中）-->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-jcl</artifactId>
                <version>${jcl.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${jcl.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${jcl.version}</version>
            </dependency>
            <!--该包是 log4j 升级到 log4j2的必须包 使用该包 不需要修改以前的 Logger.getLogger()这种获取对象的方式-->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-1.2-api</artifactId>
                <version>${jcl.version}</version>
            </dependency>
            <!--Slf4j到log4j2的适配器-->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j-impl</artifactId>
                <version>${jcl.version}</version>
            </dependency>


            <!--slf4j 与 logback 集成-->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-core</artifactId>
                <version>${logback.version}</version>
            </dependency>
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback.version}</version>
            </dependency>
            <!--Slf4j到log4j的适配器-->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>1.7.33</version>
            </dependency>

            <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>3.12.0</version>
            </dependency>
            <!--日志框架 end-->
            <!-- 定义三方包 end -->


            <!-- 定义二方包 beg -->
            <!-- 定义二方包 end -->


            <!-- 定义一方包 beg -->
            <!-- 定义一方包 end -->
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- 定义三方包 beg -->
        <!--bean自动装配-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-autoconfigure</artifactId>
            <optional>true</optional>
        </dependency>
        <!--生成配置元数据<spring-configuration-metadata.json>，
            从 @ConfigurationProperties 注释生成自己的配置元数据文件，辅助yml配置时自动提示 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <!--对微服务端点进行管理和配置监控-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <!-- 定义三方包 end -->

        <!-- 定义二方包 beg -->
        <!-- 定义二方包 end -->


        <!-- 定义一方包 beg -->
        <!-- 定义一方包 end -->
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <!--配置生成源码包-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <!--仅在install、deploy时生成源码包-->
                        <phase>verify</phase>
                        <goals>
                            <!--由jar->jar-no-fork解决jenkins中maven3.6.3的问题：“[WARNING] Failed to getClass for org.apache.maven.plugins.source.SourceJarMojo”-->
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>